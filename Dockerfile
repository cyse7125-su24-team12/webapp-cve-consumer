# # Multi stage build to create a lean production image

# # Stage 1 - build environemnt image
# # Use an official Go runtime as a parent image - tag taken from go.mod
# FROM golang:1.22 as builder

# # Set the working directory inside the container
# WORKDIR /app

# # Copy the local code to the container's workspace
# COPY . .

# # Download all dependencies mentioned in go.mod and build the app
# RUN go mod download && CGO_ENABLED=0 go build -v -o cve-app


# # Stage 2 - production environment image - copying the binary from the build environment
# # Lightweight base image to execute the binary
# FROM alpine:3.15.11

# # Set the working directory inside the container
# WORKDIR /root/

# # Copy the binary from the builder stage to the production image
# COPY --from=builder /app/cve-app .

# # Run the binary program when the container starts
# CMD ["./cve-app"]

FROM golang:latest

WORKDIR /app

COPY . .

RUN go mod tidy
RUN go build -o main .

CMD ["./main"]
