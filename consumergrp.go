package main

import (
	"context"
	"database/sql"
	"github.com/IBM/sarama"
	"log"
	"os"
	"os/signal"
	"syscall"
)

func consumerMessages(brokerList []string, config *sarama.Config, topic string, db *sql.DB) {
	config.Consumer.Group.Rebalance.Strategy = sarama.NewBalanceStrategyRoundRobin()
	// config.Consumer.Group.Rebalance.Strategy = sarama.BalanceStrategyRoundRobin
	config.Consumer.Offsets.Initial = sarama.OffsetOldest // Start consuming from the oldest message

	// Create a new consumer group
	group, err := sarama.NewConsumerGroup(brokerList, "consumer-group", config)
	if err != nil {
		log.Panicf("Error creating consumer group: %v", err)
	}
	defer func() {
		if err := group.Close(); err != nil {
			log.Panicf("Error closing consumer group: %v", err)
		}
	}()

	// Track errors
	go func() {
		for err := range group.Errors() {
			log.Printf("Error: %v", err)
		}
	}()

	// Setup a signal channel to handle SIGINT and SIGTERM for graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-signals
		cancel()
		group.Close()
	}()

	// Consume messages
	if(db.Ping()==nil){
		log.Println("Database connection is closed")
	}
	consumer := Consumer{database: db} // consume.database = db  h:= 
	for {
		if err := group.Consume(ctx, []string{topic}, &consumer); err != nil {
			log.Printf("Error consuming from group: %v", err)
			break
		}
		if ctx.Err() != nil {
			log.Println("Context error:", ctx.Err())
			return
		}
	}
}

// Consumer represents a Sarama consumer group consumer
type Consumer struct {
	database *sql.DB
}

// Setup is run at the beginning of a new session, before ConsumeClaim
func (consumer *Consumer) Setup(sarama.ConsumerGroupSession) error {
	// Initialization logic here
	log.Println("Consumer setup")
	return nil
}

// Cleanup is run at the end of a session, once all ConsumeClaim goroutines have exited
func (consumer *Consumer) Cleanup(sarama.ConsumerGroupSession) error {
	// Cleanup logic here
	log.Println("Consumer cleanup")
	return nil
}

// ConsumeClaim must start a consumer loop of ConsumerGroupClaim's Messages().
func (consumer *Consumer) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	for message := range claim.Messages() {
		log.Printf("Message claimed: topic = %s, partition = %d, offset = %d, key = %s, value = %s",
			message.Topic, message.Partition, message.Offset, string(message.Key), string(message.Value))
		// check if database connection is open
		if consumer.database.Ping() != nil {
			log.Println("Database connection is not closed")
			// return nil
		}

		// check if the database connection is closed
		if consumer.database.Ping() == nil {
			log.Println("Database connection is closed")
			return nil
		}
		
		processJSONData(message.Value, consumer.database)
		session.MarkMessage(message, "") // Mark message as processed
	}
	return nil
}
