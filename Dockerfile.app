# # Multi stage build to create a lean production image

# # Stage 1 - build environemnt image
# # Use an official Go runtime as a parent image - tag taken from go.mod
# FROM golang:1.22 as builder

# # Set the working directory inside the container
# WORKDIR /app

# # Copy the local code to the container's workspace
# COPY . .

# # Download all dependencies mentioned in go.mod and build the app
# RUN go mod download && CGO_ENABLED=0 go build -v -o cve-app


# # Stage 2 - production environment image - copying the binary from the build environment
# # Lightweight base image to execute the binary
# FROM alpine:3.15.11

# # Set the working directory inside the container
# WORKDIR /root/

# # Copy the binary from the builder stage to the production image
# COPY --from=builder /app/cve-app .

# # Run the binary program when the container starts
# CMD ["./cve-app"]

# Build stage
FROM golang:1.22 AS builder

WORKDIR /app

COPY . .

RUN go mod download && CGO_ENABLED=0 go build -v -o main

# Final stage
FROM alpine:3.15.11

# Install PostgreSQL client, OpenJDK, Bash, and wget
RUN apk --no-cache add postgresql-client openjdk11-jre bash wget

# Download and setup Kafka command-line tools (assuming Kafka 3.4.0, adjust as necessary)
RUN wget https://archive.apache.org/dist/kafka/3.4.0/kafka_2.13-3.4.0.tgz -O /tmp/kafka.tgz \
    && tar -xzf /tmp/kafka.tgz -C /opt \
    && rm /tmp/kafka.tgz

# Add Kafka bin to PATH
ENV PATH="/opt/kafka_2.13-3.4.0/bin:${PATH}"
# ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk
# Ensure all Kafka library jars are included in the CLASSPATH
ENV CLASSPATH="/opt/kafka_2.13-3.4.0/libs/*"

WORKDIR /root/

# Copy the compiled binary from the builder stage
COPY --from=builder /app/main .

# Copy db_check.sh script and make it executable
COPY ./scripts/db_check.sh /usr/local/bin/db_check.sh
RUN chmod +x /usr/local/bin/db_check.sh

CMD ["./main"]
